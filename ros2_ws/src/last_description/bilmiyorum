import os
import xacro
from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription, TimerAction
from launch.substitutions import LaunchConfiguration, PathJoinSubstitution
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch_ros.actions import Node
from launch_ros.substitutions import FindPackageShare


def generate_launch_description():
    # Paket dizinlerini al
    share_dir = get_package_share_directory('last_description')

    robotaksi_description_share = get_package_share_directory('robotaksi_description')
    
    slam_config_file = os.path.join(robotaksi_description_share, 'config', 'slam_config.yaml')
    rviz_config_file = os.path.join(robotaksi_description_share, 'config', 'slam_rviz.rviz') # RViz config dosyası hala kullanılabilir, içeriğine bağlı

    # URDF dosyasını xacro ile işle
    xacro_file = os.path.join(share_dir, 'urdf', 'last.xacro')
    robot_description_config = xacro.process_file(xacro_file)
    robot_urdf = robot_description_config.toxml()
    mars_world_path = os.path.join(robotaksi_description_share, 'world', 'city.world')

    # Launch argümanları
    use_sim_time = LaunchConfiguration('use_sim_time', default='true')
    use_sim_time_arg = DeclareLaunchArgument(
        'use_sim_time',
        default_value='true',
        description='Use simulation time'
    )
    
    # Gazebo sunucusunu başlat
    gazebo_server = IncludeLaunchDescription(
        PythonLaunchDescriptionSource([
            PathJoinSubstitution([
                FindPackageShare('gazebo_ros'),
                'launch',
                'gzserver.launch.py'
            ])
        ]),
        launch_arguments={
            'pause': 'false',
            'physics': 'ode',
            'verbose': 'false',
            'world': mars_world_path
        }.items()
    )
    
    # Gazebo istemcisini başlat
    gazebo_client = IncludeLaunchDescription(
        PythonLaunchDescriptionSource([
            PathJoinSubstitution([
                FindPackageShare('gazebo_ros'),
                'launch',
                'gzclient.launch.py'
            ])
        ])
    )
    
    # Robot State Publisher
    robot_state_publisher_node = Node(
        package='robot_state_publisher',
        executable='robot_state_publisher',
        name='robot_state_publisher',
        parameters=[
            {
                'robot_description': robot_urdf,
                'use_sim_time': use_sim_time 
            }
        ],
        output='screen'
    )
    
    # Robot'u Gazebo'ya spawn et (0.5 saniye sonra başlatıldı)
    urdf_spawn_node = TimerAction(
        period=0.5, 
        actions=[
            Node(
                package='gazebo_ros',
                executable='spawn_entity.py',
                arguments=[
                    '-entity', 'last_robot',
                    '-topic', 'robot_description',
                    '-x', '46.0',
                    '-y', '49.0',
                    '-z', '0.45',        
                    '-Y',  '3.14',      ],
                output='screen'
            )
        ]
    )
    
    # Joint State Broadcaster ve Diff Drive Controller spawner'lar
    joint_state_broadcaster_spawner = TimerAction(
        period=1.5, 
        actions=[
            Node(
                package="controller_manager",
                executable="spawner",
                arguments=["joint_state_broadcaster", "--controller-manager", "/controller_manager"],
                parameters=[{'use_sim_time': use_sim_time}],
                output='screen'
            )
        ]
    )
    
    diff_drive_spawner = TimerAction(
        period=2.0, 
        actions=[
            Node(
                package='controller_manager',
                executable='spawner',
                arguments=['diff_drive_controller', '--controller-manager', '/controller_manager'],
                parameters=[{'use_sim_time': use_sim_time}],
                output='screen'
            )
        ]
    )
    
    # SLAM Toolbox Node kaldırıldı
    # Lidar sensör düğümleri de buradan kaldırılmalı (eğer ayrı bir düğüm olarak tanımlıysa,
    # örneğin rplidar_node veya urg_node gibi)
    
    # lane_follower_node
    lane_follower_node = TimerAction(
        period=3.0, # Kontrolcülerden sonra makul bir gecikme
        actions=[
            Node(
                package='lane_follower', 
                executable='lane_follower', 
                name='lane_follower',
                output='screen',
                parameters=[{'use_sim_time': use_sim_time}]
            )
        ]
    )
    
    # autonomous_driver_node
    autonomous_driver_node = TimerAction(
        period=3.5, # lane_follower'dan hemen sonra başlasın
        actions=[
            Node(
                package='lane_follower', 
                executable='autonomous_driver', 
                name='autonomous_driver',
                output='screen',
                parameters=[{'use_sim_time': use_sim_time}],
            )
        ]
    )
    
    # RViz Node
    rviz_node = TimerAction(
        period=5.0, # Temel düğümlerden sonra başlasın
        actions=[
            Node(
                package='rviz2',
                executable='rviz2',
                name='rviz2', # İsimlendirmeyi daha genel yaptım
                output='screen',
                arguments=['-d', rviz_config_file],
                parameters=[{'use_sim_time': use_sim_time}]
            )
        ]
    )
    
    # Teleop Node (İsteğe bağlı - hala manuel kontrol istiyorsanız)
    teleop_node = TimerAction(
        period=15.0, 
        actions=[
            Node(
                package='teleop_twist_keyboard',
                executable='teleop_twist_keyboard',
                name='teleop_twist_keyboard',
                output='screen',
                prefix='gnome-terminal --',
                remappings=[
                    ('/cmd_vel', '/diff_drive_controller/cmd_vel_unstamped'), 
                ]
            )
        ]
    )
    
    return LaunchDescription([
        # Launch argumentleri
        use_sim_time_arg,
        
        # Gazebo
        gazebo_server,
        gazebo_client,
        
        # Robot
        robot_state_publisher_node,
        urdf_spawn_node,
        
        # Controllers
        joint_state_broadcaster_spawner,
        diff_drive_spawner,
        
        # Autonomous sürüş ve lane takibi
        lane_follower_node,
        autonomous_driver_node,

        # Visualization
        rviz_node,
        
        # Manual Control (Autonomous driver ile aynı anda çalışmayacaksa)
        teleop_node,
    ])
